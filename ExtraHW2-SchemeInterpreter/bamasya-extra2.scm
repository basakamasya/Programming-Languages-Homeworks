(define letstar-stmt? (lambda (e)
			(and (list? e) (= (length e) 3) (equal? (car e) 'let*) (binding-list? (cadr e)) (expr-stmt? (caddr e)))))
(define else-condition? (lambda (e)
			  (and (list? e) (= (length e) 2) (equal? (car e) 'else) (expr-stmt? (cadr e)))))
(define let-stmt? (lambda (e)
		    (and (list? e) (equal? (length e) 3) (equal? (car e) 'let) (binding-list? (cadr e)) (expr-stmt? (caddr e)))))
(define binding-list? (lambda (e)
			(if (list? e)
			  (if (not (null? e)) (if (and (pair? (car e))(= (length (car e)) 2) (symbol? (caar e)) (expr-stmt? (cadr (car e))))
									(binding-list? (cdr e)) #f) #t) #f ))
)
(define conditional? (lambda (e)
	 (and (list? e) (= (length e) 2) (expr-stmt? (car e)) (expr-stmt? (cadr e)))))
(define conditional-list? (lambda (e)
  	(if (null? e) #t (let ((new-list (list e))) (if (conditional? (car new-list)) (conditional-list? (cdr new-list)) #f)))))
(define check-cond? (lambda (e)
		      		      (if (not (null? e)) (if (and (pair? (car e)) (= (length (car e)) 2))
							    (if (= (length e) 1) (if (and (equal? (caar e) 'else) (else-condition? (car e)))#t #f)
							      (if (not (equal? (caar e) 'else)) (check-cond? (cdr e)) #f))#f) )))
(define cond-stmt? (lambda (e)
		     (and (list? e) (> (length e) 2) (equal? (car e) 'cond) (pair? (cadr e)) (not (equal? (caadr e) 'else)) (conditional-list? (cadr e))
			  (check-cond? (cdr e)))))
(define if-stmt? (lambda (e)
		   (and (list? e) (= (length e) 4) (equal? (car e) 'if) (expr-stmt? (cadr e)) (expr-stmt? (caddr e)) (expr-stmt? (cadddr e)))))
(define operation? (lambda (e)
	(if (and (list? e) (operator? (car e)) (actual-stmt? (cdr e))) #t #f)))
(define expr-stmt? (lambda (e)
 	(if (or (number? e)(symbol? e) (if-stmt? e) (cond-stmt? e) (let-stmt? e) (letstar-stmt? e) (operation? e)) #t #f)))
(define actual-stmt? (lambda (e)
  	(if (null? e) #t (if (expr-stmt? (car e)) (actual-stmt? (cdr e)) #f))))
(define operator? (lambda (e)
		     (if (or (equal? e '+) (equal? e '-) (equal? e '*) (equal? e '/)) #t #f)))
(define get-operator (lambda (op-symbol) 
		       		         (cond 
					   ((equal? op-symbol '+) +)
					   ((equal? op-symbol '-) -)
					   ((equal? op-symbol '*) *)
					   ((equal? op-symbol '/) /)
					   (else "ERROR"))))
(define define-stmt? (lambda (e)
		       (and (list? e) (= (length e) 3) (equal? (car e) 'define) (symbol? (cadr e)))))
(define get-value (lambda (var env)
		    (cond
		      ((null? env) (let ((fordisplay (display "cs305: ERROR"))) (let ((dummy2 (newline))) (let ((dummy3 (newline))) (repl env)))))
		      ((equal? (caar env) var) (cdar env))
		      (else (get-value var (cdr env))))))
(define extend-env (lambda (var val old-env) (cons (cons var val) old-env)))
(define repl (lambda (env)
	       	         (let* (
				(dummy1 (display "cs305> "))
				(expr (read))
				(new-env (if (define-stmt? expr)
				(extend-env (cadr expr) (interpreter (caddr expr) env) env) env))
				(val (if (define-stmt? expr) (cadr expr)
			 	(interpreter expr env)))
				(dummy2 (display "cs305: "))
				(dummy3 (display val))
				(dummy4 (newline))
				(dummy4 (newline)))
			   	(repl new-env))))
(define interpreter (lambda (e env)
		      		         (cond 
					   ((number? e) e)
					   ((symbol? e) (get-value e env))
					   ((not (list? e)) "ERROR")
					   ((if-stmt? e) (interpreter (if (eq? ( interpreter (car (cdr e)) env) 0) (car (cdr (cdr (cdr e)))) (car (cdr (cdr e)))) env))
					   ((cond-stmt? e) (if (equal? (length e) 3) (if (equal? (caaddr e) 'else) 
										       (if (not (eq? (interpreter (car (cadr e))env) 0))		
											 (interpreter (cadr (cadr e)) env)
											 (interpreter (cadr (caddr e)) env)))
										       (let ((new-cond (list 'if (caadr e) (cadadr e) (cons 'cond (cddr e)))))
											 (interpreter new-cond env))))
					   ((let-stmt? e) (let ((expressions (map interpreter (map cadr (cadr e)) (make-list (length (cadr e)) env))))
							    (let ((variables (map car(cadr e))))
							    (let ((new-env (append (map cons variables expressions) env)))							   						         (interpreter (caddr e) new-env)))))
					   ((letstar-stmt? e) (let ((new-let (if (equal? (length (cadr e)) 0) (list 'let '() (caddr e))
									       (if (equal? (length (cadr e)) 1)
									       (list 'let (list (car (cadr e))) (caddr e))
									       (list 'let (list (car (cadr e)))  (list 'let* (cdr (cadr e)) (caddr e)))))))
								(interpreter new-let env)))
					   ((operation? e)
					     (let ((operands (map interpreter (cdr e) (make-list (length (cdr e)) env)))
						   (operator (get-operator (car e))))
						   (apply operator operands)))
					   (else
					     "ERROR"))))
(define cs305 (lambda () (repl '())))


