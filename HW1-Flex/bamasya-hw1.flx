 int LineNo = 1;
 char * ConvertIntLexeme(char number[])
 {
	 char * num1 = (char*)malloc(4);
	 char * num2 = (char*)malloc(4);
	 char * num = (char*)malloc(4);
	 int i;
	 for (i = 0; i < strlen(number); i++)
	 {
		if (number[i] == 'E')
		{
			memcpy(num1,number,i);
			int num1int = atoi(num1);
			memcpy(num2,number+i+1,strlen(number)-1);
			int num2int = atoi(num2);
			sprintf(num,"%d",num1int);
			sprintf(num+strlen(num),"%c", 'E');
			sprintf(num+strlen(num), "%d", num2int);
			return num;
		}
	 }
	 int numberint = atoi(number);
	 sprintf(num,"%d",numberint);
	 return num;
 } 
 char * ConvertFloatLexeme(char number[])
 {
	 char * num = (char*)malloc(4);
	 char * num1 = (char*)malloc(4);
	 char * num2 = (char*)malloc(4);
	 char * num3 = (char*)malloc(4);
	 char * num4 = (char*)malloc(4);
	 int i;
	 for (i = 0; i < strlen(number); i++)
	 {
		 if (number[i] == '.')
		 {
			 memcpy(num1,number,i);
			 num1[i] = '\0';
			 num1 = ConvertIntLexeme(num1);
			 if (num1[0] == '0' && number[0] == '-')
			 {
				num1[0] = '-';
				num1[1] = '0';
				num1[2] = '\0';
			 }
			 memcpy(num2,number+i+1,strlen(number)-i-1);
			 num2[strlen(number)-i-1] = '\0';
			 int j;
			 for (j = 0; j < strlen(num2); j++)
			 {
				if (num2[j] == 'E')
				{
					memcpy(num3,num2,j);
					num3[j] = '\0';
					memcpy(num4,num2+j+1,strlen(num2)-j-1);
					num4[strlen(num2)-j-1] = '\0';
					num4 = ConvertIntLexeme(num4);
					int r;
					for (r = strlen(num3)-1; r >=0; r--)
					{
						if (num3[r] == '0')
						{
							num3[r] = '\0';
						}
						else break;
					}
					if (strlen(num3) == 0)
					{
						num3[0] = '0';
					}
					sprintf(num2,"%s", num3);
					sprintf(num2+strlen(num2),"%c", 'E');
					sprintf(num2+strlen(num2), "%s", num4);
					sprintf(num,"%s", num1);
					sprintf(num+strlen(num),"%c", '.');
					sprintf(num+strlen(num), "%s", num2);
					return num;
				}
			 }
			 int k;
			 for (k = strlen(num2) - 1; k >= 0; k--)
			 {
				if (num2[k] == '0')
				{
					num2[k] = '\0';
				}
				else
				{
					break;
				}
			 }
		 }
	 }
	 sprintf(num,"%s", num1);
	 sprintf(num+strlen(num),"%c", '.');
	 if (strlen(num2) == 0)
	 {
		 num2[0] = '0';
	 } 
	 sprintf(num+strlen(num), "%s", num2);
	 return num;
 }
%%
"//".*
int printf("%d tINT\n", LineNo);
real printf("%d tREAL\n", LineNo);
if printf("%d tIF\n", LineNo);
endif printf("%d tENDIF\n", LineNo);
vector printf("%d tVECTOR\n", LineNo);
matrix printf("%d tMATRIX\n", LineNo);
transpose printf("%d tTRANSPOSE\n", LineNo);
"," printf("%d tCOMMA\n", LineNo);
".*" printf("%d tDOTPORD\n", LineNo);
"(" printf("%d tLPAR\n", LineNo);
")" printf("%d tRPAR\n", LineNo);
= printf("%d tASSIGNM\n", LineNo);
"-" printf("%d tMINUS\n", LineNo);
"+" printf("%d tPLUS\n", LineNo);
"/" printf("%d tDIV\n", LineNo);
"*" printf("%d tSTAR\n", LineNo);
";" printf("%d tSEMI\n", LineNo);
== printf("%d tEQUL\n", LineNo);
!= printf("%d tINEQ\n", LineNo);
"<" printf("%d tLT\n", LineNo);
"<=" printf("%d tLE\n", LineNo);
">" printf("%d tGT\n", LineNo);
">=" printf("%d tGE\n", LineNo);
"[" printf("%d tLBRAC\n", LineNo);
"]" printf("%d tRBRAC\n", LineNo);
"&&" printf("%d tAND\n", LineNo);
"||" printf("%d tOR\n", LineNo);
[A-Za-z_][a-zA-Z0-9_]* printf("%d tIDENT (%s)\n", LineNo, yytext);
[0-9]+\.[0-9]+E?-?[0-9]+ printf("%d tPOSREAL (%s) (%s)\n", LineNo, yytext, ConvertFloatLexeme(yytext));
-[0-9]+\.[0-9]+E?-?[0-9]+ printf("%d tNEGREAL (%s) (%s)\n", LineNo, yytext, ConvertFloatLexeme(yytext));
[0-9]+\.[0-9]+ printf("%d tPOSREAL (%s) (%s)\n", LineNo, yytext, ConvertFloatLexeme(yytext));
-[0-9]+\.[0-9]+ printf("%d tNEGREAL (%s) (%s)\n", LineNo, yytext, ConvertFloatLexeme(yytext));
[0-9]+[E0-9]* printf("%d tPOSINT (%s) (%s)\n", LineNo, yytext, ConvertIntLexeme(yytext));
-[0-9]+[E0-9]* printf("%d tNEGINT (%s) (%s)\n", LineNo, yytext, ConvertIntLexeme(yytext));
\n LineNo++;
.
%%
int main()
{
  yylex();
}
